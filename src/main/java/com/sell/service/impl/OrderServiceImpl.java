package com.sell.service.impl;import com.sell.converter.OrderMasterToOrderDTO;import com.sell.dataTransferObject.CartDTO;import com.sell.dataTransferObject.OrderDTO;import com.sell.dataobject.OrderDetail;import com.sell.dataobject.OrderMaster;import com.sell.dataobject.ProductInfo;import com.sell.enums.OrderStatusEnum;import com.sell.enums.PayStatusEnum;import com.sell.enums.ResponseEnum;import com.sell.exception.SellException;import com.sell.repository.OrderDetailRepository;import com.sell.repository.OrderMasterRepository;import com.sell.responseUntils.KeyUntil;import com.sell.service.OrderService;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageImpl;import org.springframework.data.domain.Pageable;import org.springframework.stereotype.Service;import org.springframework.util.CollectionUtils;import javax.transaction.Transactional;import java.math.BigDecimal;import java.util.List;import java.util.stream.Collectors;@Servicepublic class OrderServiceImpl implements OrderService {    @Autowired    private ProductInfoServiceImpl productInfoService;    @Autowired    private OrderDetailRepository orderDetailRepository;    @Autowired    private OrderMasterRepository orderMasterRepository;    @Override    @Transactional    public OrderDTO create(OrderDTO orderDTO) {        String orderId = KeyUntil.genUniqueKey();        BigDecimal orderAmount = new BigDecimal(0);        //组织商品详情信息        for (OrderDetail orderDetail:orderDTO.getOrderDetails()){            ProductInfo productInfo = productInfoService.findById(orderDetail.getProductId());            if(productInfo == null){                throw new SellException(ResponseEnum.PRODUCT_NOT_EXIST);            }            //计算订单总价            orderAmount = productInfo.getProductPrice().multiply(new BigDecimal(orderDetail.getProductQuantity())).add(orderAmount);            //订单详情入库            orderDetail.setOrderId(orderId);            orderDetail.setDetailId(KeyUntil.genUniqueKey());            BeanUtils.copyProperties(productInfo,orderDetail);//将商品的对象属性复制到商品详情中,属性拷贝的时候注意顺序，因为属性为null的也会被拷贝过去            OrderDetail saveOrderDetailResult = orderDetailRepository.save(orderDetail);            if(saveOrderDetailResult == null){                throw new SellException(ResponseEnum.SAVE_FAIL.getCode(),ResponseEnum.SAVE_FAIL.getMessage());            }        }        //写入商品订单        OrderMaster orderMaster = new OrderMaster();        BeanUtils.copyProperties(orderDTO,orderMaster);//注意复制的顺序        orderMaster.setOrderId(orderId);        orderMaster.setOrderAmount(orderAmount);        orderMaster.setOrderStatus(OrderStatusEnum.NEW.getCode());        orderMaster.setPayStatus(PayStatusEnum.WAIT.getCode());        orderMasterRepository.save(orderMaster);        //扣库存,lamda表达式        List<CartDTO> cartDTOS = orderDTO.getOrderDetails().stream().map(                e -> new CartDTO(e.getProductId(),e.getProductQuantity())        ).collect(Collectors.toList());        productInfoService.decreaseStock(cartDTOS);        orderDTO.setOrderId(orderId);        return orderDTO;    }    @Override    public OrderDTO findById(String id) {        OrderMaster orderMaster = orderMasterRepository.findByOrderId(id);        if(orderMaster == null){            throw new SellException(ResponseEnum.PRODUCT_NOT_EXIST);        }        List<OrderDetail> orderDetails = orderDetailRepository.findByOrderId(id);        if(CollectionUtils.isEmpty(orderDetails)){            throw new SellException(ResponseEnum.PRODUCT_DETAIL_EXIST);        }        OrderDTO orderDTO = new OrderDTO();        BeanUtils.copyProperties(orderMaster,orderDTO);        orderDTO.setOrderDetails(orderDetails);        return orderDTO;    }    /**     * 查找用户的订单列表     *     * @param openId     * @param pageable     * @return     */    @Override    public Page<OrderDTO> findList(String openId, Pageable pageable) {        Page<OrderMaster> orderMastersPage = orderMasterRepository.findByBuyerOpenid(openId,pageable);        List<OrderDTO> orderDTOS = OrderMasterToOrderDTO.convert(orderMastersPage.getContent());        //转换成orderDTO        Page<OrderDTO> orderDTOPage = new PageImpl<OrderDTO>(orderDTOS,pageable,orderMastersPage.getTotalElements());        return orderDTOPage;    }    @Override    public Page<OrderDTO> findList(Pageable pageable) {        Page<OrderMaster> orderMastersPage = orderMasterRepository.findAll(pageable);        List<OrderDTO> orderDTOS = OrderMasterToOrderDTO.convert(orderMastersPage.getContent());        //转换成orderDTO        Page<OrderDTO> orderDTOPage = new PageImpl<OrderDTO>(orderDTOS,pageable,orderMastersPage.getTotalElements());        return orderDTOPage;    }    @Override    @Transactional    public OrderDTO cancel(OrderDTO orderDTO) {        OrderMaster orderMaster = new OrderMaster();        //判断订单状态        if(!orderMaster.getOrderStatus().equals(OrderStatusEnum.NEW.getCode())){            throw new SellException(ResponseEnum.ORDER_STATUS_ERROR);        }        //修改订单状态        orderMaster.setOrderStatus(OrderStatusEnum.CANCEL.getCode());        BeanUtils.copyProperties(orderDTO,orderMaster);        OrderMaster saveResult = orderMasterRepository.save(orderMaster);        if(saveResult == null){            throw new SellException(ResponseEnum.ORDER_UPDATE_ERROR);        }        //归还库存        List<OrderDetail> orderDetails = orderDTO.getOrderDetails();        List<CartDTO> cartDTOS = orderDetails.stream().map(                e -> new CartDTO(e.getProductId(),e.getProductQuantity())        ).collect(Collectors.toList());        productInfoService.increaseStock(cartDTOS);        //退款        return orderDTO;    }    @Override    public OrderDTO finish(OrderDTO orderDTO) {        return null;    }    @Override    public OrderDTO pay(OrderDTO orderDTO) {        return null;    }}